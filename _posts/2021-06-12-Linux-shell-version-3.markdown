---
layout: post
title:  "《linux-shell》读书笔记"
date:   2021-06-12 11:25:00 +0800
categories: book-note
---

# ch05

### 5.2 shell的父子关系
`ps -f`帮助理清生成的子shell
#### 5.2.1 进程列表
进程列表是一种命令分组，`( command )`生成了一个子shell来执行对应的命令；
另一种命令分组`{ command; }`不会创建出子shell
#### 5.2.2 别出心裁的子shell用法
##### 后台模式&
`jobs -i`显示后台作业信息
##### 协程
`coproc My_Job { sleep 10; }`为协程命名

### 5.3 理解shell的内建命令
### 5.3.2 内建命令
内建命令不需要使用子进程来执行。

可以利用type命令来了解某个命令是否是内建的
#### 从history列表中唤回命令，只需输入惊叹号和命令在history列表中的编号即可

# ch06

### 6.7 数组变量
```
$ mytest=(one two three four five)
$ echo mytest
one
$ echo ${mytest[2]}
three
$ echo ${mytest[*]}
one two three four five
$ mytest[2]=seven
one two seven four five
```
数组变量的可移植性并不好

# ch11
字符数限制
+ 单行命令长度不能超过255个字符
+ 用户变量名长度不超过20个字符

### 11.7 执行数学运算
#### 11.7.1 expr命令
对于那些容易被shell错误解释的字符，在它们传入expr命令之前，需要使用转义字符将其标出来`var=$(expr 6 \* 2)`
#### 11.7.2 使用方括号
bash提供了一种更简单的方法`$[ operation ]`

但bash shell数学运算符只支持整数运算，zsh提供了完整的浮点数算术操作
#### 11.7.3 浮点解决方案
常见的方案是用bc
##### bc的基本用法
bc的内建变量scale是保留的小数位数，默认值为0
```
variable=$(echo "options; expression" | bc)

var5=$(bc << EOF
scale = 4
a1 = ( $var1 * $var2 )
$var3 + $var4
EOF
)
```

### 11.8 退出脚本
#### 11.8.1 查看退出状态码
`$?`的值是最后一条命令的退出状态码

常见的退出状态码如表11-2所示
#### 11.8.2 exit命令
`exit 300`会将300%255=44作为退出状态码

# ch14

### 14.1 命令行参数
#### 14.1.1 读取参数
位置参数超过9就需要花括号${10}
#### 14.1.2 读取脚本名
命令会和脚本名混在一起放在$0

`name=$(basename $0)`可以得到不包含路径的脚本名
#### 14.1.3 测试参数
用`if [ -n "$1" ]`测试其中是否存在数据

### 14.2 特殊参数变量
#### 14.2.1 参数统计
特殊变量$#含有脚本运行时携带的命令行参数的个数。

但用${$#}获取最后一个参数会出错。需要将美元符换成感叹号${!#}
#### 14.2.2 抓取所有的数据
$*将所有参数当做一个单词保存
$@将所有参数当做同一字符串中的多个独立的单词

### 14.3 移动变量
shift命令将每个参数变量向左移动一个位置，$1的值会被删除，$0的值不变

### 14.4 处理选项
有3种方法
1. 查找选项
+ 处理简单选项
+ 分离参数和选项
+ 处理带值的选项
1. 使用getopt命令
1. 使用更高级的getopts

### 14.5 将选项标准化

|选项|描述|
|----|----|
|-a|显示所有对象|
|-c|生成一个计数|
|-d|指定一个目录|
|-e|扩展一个对象|
|-f|指定读入数据的文件|
|-h|显示命令的帮助信息|
|-i|忽略文本的大小写|
|-l|产生输出的长格式版本|
|-n|使用非交互模式（批处理）|
|-o|将所有输出重定向到指定的输出文件|
|-q|以安静模式运行|
|-r|递归地处理目录和文件|
|-s|以安静模式运行|
|-v|生成详细输出|
|-x|排除某个对象|
|-y|对所有问题回答yes|

### 14.6 获得用户输入
#### 基本的读取
`read 变量名`
可以用-p选项指定提示符，用-t选项指定等待时间，用-s选项避免输入数据出现在显示器上
#### 从文件中读取
`car file | while read line do ... done`

# ch19

### 19.1 文本处理
#### 19.1.1 sed编辑器
`sed options script file`，script参数指定了应用于流数据上的单个命令。如果需要用多个命令，要么使用-e选项在命令行中指定，要么使用-f选项在单独的文件中指定
##### 在命令行定义编辑器命令
`sed 's/test/trial/' data.txt`只替换每行中出现的第一处。

### 19.2 sed编辑器基础
#### 19.2.1 更多的替换选项
##### 替换标记
要让替换命令能够替换一行中不同地方出现的文本必须使用替换标记`s/pattern/replacement/flag`，有4种可用的替换标记
+ 数字：表面新文本将替换第几处匹配的地方
+ g：表明替换所有
+ p：表明原先行的内容要打印出来，通常会和sed的-n选项一起使用
+ w file：将替换的结果写到文件中，只有那些包含匹配模式的行才会保存在指定的输出文件中
##### 替换字符
允许选择其他字符来作为替换命令中的字符串分隔符`sed 's!/bin/bash!/bin/csh!' /etc/passwd`
#### 19.2.2 使用地址














